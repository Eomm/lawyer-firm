name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the main and wip branches
  push:
    branches: ['main', 'dot-com']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: npm ci

      - name: Build with Astro
        run: npm run build
        env:
          WEBSITE_BUILD: https://studiolegaleferrini.it

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Build for FTP (ARGO)
        run: npm run build
        env:
          WEBSITE_BUILD: https://studiolegaleferrini.com

      - name: Upload FTP artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-ftp-argo
          path: ./dist

  # Deploy the first build to GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Deploy the second build to FTP
  deploy-ftp:
    environment:
      name: ftp-host
      url: https://studiolegaleferrini.com
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download FTP artifact
        uses: actions/download-artifact@v5
        with:
          name: dist-ftp-argo
          path: ./dist-ftp

      - name: FTP deploy to /argo
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist-ftp/
          server-dir: ./www/
          timeout: 60000
